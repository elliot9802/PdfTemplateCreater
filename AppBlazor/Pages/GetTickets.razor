@page "/get-tickets"
@using Models.DTO
@using Newtonsoft.Json;
@using Services
@using AppBlazor.Components;
@inject HttpClient HttpClient
@inject ConfigService configService

@if (dataLoading)
{
    <p><em>Laddar...</em></p>
}
else if (webbUids is null || templates is null)
{
    <p><em>Ingen data att visa.</em></p>

}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h3>Hämta biljetter från större köp</h3>
                    </div>
                    <div class="card-body">
                        <select @bind="selectedWebbUidString" class="form-control mb-3">
                            <option value="">-- Välj en WebbUid --</option>
                            @foreach (var uid in webbUids)
                            {
                                <option value="@uid.WebbUid.ToString()">@uid.Name</option>
                            }
                        </select>
                        <select @bind="selectedShowEventInfo" class="form-control mb-3">
                            <option value="">-- Välj en mall --</option>
                            @foreach (var template in templates.OrderBy(t => t.ShowEventInfo))
                            {
                                <option value="@template.ShowEventInfo">@($"Mall {template.ShowEventInfo} - {(template.ShowEventInfo <= 3 ? "Fördefinerad" : "Användartillagd")}: {template.Name}")</option>
                            }
                        </select>
                        <button @onclick="PreviewTemplate" class="btn btn-primary"
                                disabled="@(isLoading || selectedWebbUid == Guid.Empty)">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Laddar...</span>
                            }
                            else
                            {
                                <span>Visa biljetter</span>
                            }
                        </button>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(pdfBase64) && !isLoading)
                {
                    <div class="mt-3 text-center">
                        <a href="@($"data:application/pdf;base64,{pdfBase64}")" class="btn btn-success" download="tickets.pdf">Ladda ner PDF</a>
                    </div>
                <ErrorBoundary>
                    <PdfPreviewComponent PdfBase64="@pdfBase64" />
                </ErrorBoundary>
                }

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        @ErrorMessage
                    </div>
                }
                else if (string.IsNullOrEmpty(pdfBase64))
                {
                    <p class="text-center mt-3">Alla biljetter kommer visas här...</p>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<WebbUidInfo>? webbUids = new();
    private List<TemplateCUdto>? templates = new();
    private int? selectedShowEventInfo;
    private string? pdfBase64;
    private bool dataLoading = false;
    private bool isLoading = false;
    public string? ErrorMessage { get; set; }
    private string selectedWebbUidString = "";
    private Guid selectedWebbUid => Guid.TryParse(selectedWebbUidString, out var guid) ? guid : Guid.Empty;
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        dataLoading = true;
        ErrorMessage = string.Empty;
        try
        {
            await LoadWebbUidsAsync();
            await LoadTemplatesAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to load data: " + ex.Message;
            throw;
        }
        finally
        {
            dataLoading = false;
        }
    }

    private async Task LoadTemplatesAsync()
    {
        var response = await HttpClient.GetAsync(configService!.GetApiUrl("/api/PdfTemplate/ReadTemplatesDto"));
        if (response.IsSuccessStatusCode)
        {
            templates = await response.Content.ReadFromJsonAsync<List<TemplateCUdto>>();
        }
        else
        {
            throw new InvalidOperationException("Failed to load templates.");
        }
    }

    private async Task LoadWebbUidsAsync()
    {
        var response = await HttpClient.GetAsync(configService!.GetApiUrl("/api/PdfTemplate/GetAllWebbUids"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            webbUids = await response.Content.ReadFromJsonAsync<List<WebbUidInfo>>();
        }
        else
        {
            throw new InvalidOperationException("Failed to load Webb UIDs.");
        }
    }

    private async Task PreviewTemplate()
    {
        isLoading = true;
        ErrorMessage = string.Empty;

        var requestUri = configService.GetApiUrl($"/api/PdfTemplate/CreateCombinedPdf?webbUid={selectedWebbUid}&showEventInfo={selectedShowEventInfo}");

        var response = await HttpClient.PostAsync(requestUri, null);

        if (response.IsSuccessStatusCode)
        {
            var pdfData = await response.Content.ReadAsByteArrayAsync();
            pdfBase64 = Convert.ToBase64String(pdfData);
        }
        else
        {
            ErrorMessage = $"Failed to preview the template. Status: {response.StatusCode}";
        }
        isLoading = false;
    }
}