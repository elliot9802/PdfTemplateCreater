// <auto-generated />
using System;
using DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbContext.Migrations.SqlServerMigrations
{
    [DbContext(typeof(TicketTemplateDbContext.SqlServerDbContext))]
    [Migration("20240405143629_initial_migration")]
    partial class initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbModels.FileDescription", b =>
                {
                    b.Property<int>("FileStorageId")
                        .HasColumnType("int")
                        .HasColumnName("FileStorageID");

                    b.Property<int?>("ChildFileStorageId")
                        .HasColumnType("int")
                        .HasColumnName("ChildFileStorageID");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreateUser")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FileCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("FileCategoryID");

                    b.Property<int?>("FileSize")
                        .HasColumnType("int");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FileTypeID");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("int");

                    b.Property<byte?>("ValidState")
                        .HasColumnType("tinyint");

                    b.HasKey("FileStorageId");

                    b.HasIndex("ChildFileStorageId");

                    b.ToTable("FileDescription");
                });

            modelBuilder.Entity("DbModels.FileStorage", b =>
                {
                    b.Property<int>("FileStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FileStorageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileStorageId"));

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreateUser")
                        .HasColumnType("int");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUser")
                        .HasColumnType("int");

                    b.Property<byte?>("ValidState")
                        .HasColumnType("tinyint");

                    b.HasKey("FileStorageId");

                    b.ToTable("FileStorage");
                });

            modelBuilder.Entity("DbModels.TicketTemplateDbM", b =>
                {
                    b.Property<Guid>("TicketTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FileStorageID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ShowEventInfo")
                        .HasColumnType("int");

                    b.Property<string>("TicketsHandlingJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketTemplateId");

                    b.HasIndex("FileStorageID");

                    b.ToTable("TicketTemplate");
                });

            modelBuilder.Entity("DbModels.TicketsDataView", b =>
                {
                    b.Property<int?>("ArtNotText")
                        .HasColumnType("int");

                    b.Property<string>("ArtikelNr")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Artikelnamn")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Beskrivning")
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("BokningsNr")
                        .HasColumnType("money");

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Ingang")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("KontaktPerson")
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Pris")
                        .HasColumnType("money");

                    b.Property<string>("Rutbokstav")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("StrukturArtikel")
                        .HasColumnType("bit");

                    b.Property<Guid>("WebbUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Webbcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("anamn")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("datumStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("eMail")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("eventdatum_id")
                        .HasColumnType("int");

                    b.Property<string>("logorad1")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("logorad2")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("namn")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("namn1")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("namn2")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("plats")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("platsbokad_id")
                        .HasColumnType("int");

                    b.Property<string>("reklam1")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("serviceavgift1_kr")
                        .HasColumnType("money");

                    b.Property<int>("showEventInfo")
                        .HasColumnType("int");

                    b.Property<string>("stolsnr")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("stolsrad")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("wbarticleinfo")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("wbeventinfo")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("webbkod")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.ToTable((string)null);

                    b.ToView("Vy_ShowTickets", "dbo");
                });

            modelBuilder.Entity("DbModels.FileDescription", b =>
                {
                    b.HasOne("DbModels.FileDescription", "ChildFileStorage")
                        .WithMany("InverseChildFileStorage")
                        .HasForeignKey("ChildFileStorageId");

                    b.HasOne("DbModels.FileStorage", "FileStorage")
                        .WithMany("FileDescriptions")
                        .HasForeignKey("FileStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildFileStorage");

                    b.Navigation("FileStorage");
                });

            modelBuilder.Entity("DbModels.TicketTemplateDbM", b =>
                {
                    b.HasOne("DbModels.FileStorage", null)
                        .WithMany()
                        .HasForeignKey("FileStorageID")
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.FileDescription", b =>
                {
                    b.Navigation("InverseChildFileStorage");
                });

            modelBuilder.Entity("DbModels.FileStorage", b =>
                {
                    b.Navigation("FileDescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
