@page "/pdfdesigneditor"

@using Models
@using DbModels
@using Services
@using System.Text.RegularExpressions
@using System.Reflection
@using Newtonsoft.Json
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime

<InputFile OnChange="HandleFileSelected" />
<div>
    <label>Ticket ID:</label>
    <input @bind="ticketId" />
</div>
<div>
    <label>Show Event Info:</label>
    <input @bind="showEventInfo" />
</div>

<div class="customtext-container">
    <div class="form-group">
        <button @onclick="AddCustomText" class="btn btn-primary btn-sm">
            Add Custom Text
        </button>
    </div>

    @foreach (var customText in customTexts)
    {
        <div class="custom-text-element">
            <button @onclick="() => RemoveCustomText(customText)" class="btn btn-danger mb-2 btn-sm">Remove</button>

            <div class="form-group">
                <label>Text</label>
                <input type="text" class="form-control mb-2" placeholder="Text" @bind="customText.Text">
            </div>
            <div class="form-group">
                <label>X Position</label>
                <input type="number" class="form-control mb-2" placeholder="X Position" @bind="customText.PositionX">
            </div>
            <div class="form-group">
                <label>Y Position</label>
                <input type="number" class="form-control mb-2" placeholder="Y Position" @bind="customText.PositionY">
            </div>
            <div class="form-group">
                <label>Font Size</label>
                <input type="number" class="form-control mb-2" placeholder="Font Size" @bind="customText.FontSize">
            </div>
            <div class="form-group">
                <label>Color</label>
                <input type="color" class="form-control mb-2" @bind="customText.Color">
            </div>
        </div>
    }
</div>

<div class="scrollable-container customization-container">
    @foreach (var includeProperty in ticketHandlingIncludeProperties)
    {
        <div class="form-group">
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input"
                       checked="@(Convert.ToBoolean(includeProperty.GetValue(ticketHandling)))"
                       @onchange="(e) => HandleCheckboxChange(e, includeProperty)"
                       id="@includeProperty.Name" />
                <label class="custom-control-label" for="@includeProperty.Name">@GetDisplayName(includeProperty.Name)</label>
            </div>
        </div>
        {
            var isChecked = (bool)includeProperty.GetValue(ticketHandling);
            if (isChecked)
            {
                @foreach (var positionProperty in GetPositionPropertiesForInclude(includeProperty.Name))
                {
                    <div class="position-input-group">
                        <label>@GetDisplayName(positionProperty.Name)</label>
                        <input type="number" class="form-control mb-2"
                               value="@positionProperty.GetValue(ticketHandling)?.ToString()"
                               @oninput="eventArgs => UpdatePositionProperty(eventArgs, positionProperty.Name)" />
                    </div>
                }
            }
        }
    }
</div>

<div class="mt-3">
    <button class="btn btn-info" @onclick="CreatePdf">Preview</button>
    <button class="btn btn-success" @onclick="CreateTemplate">Save</button>
</div>


<style>
    .customization-container {
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 20px;
    }

    .position-input-group {
        margin-top: 10px;
    }
</style>

@if (pdfBase64 != null)
{
    <div>
        <iframe width="100%" height="500px" src="@($"data:application/pdf;base64,{pdfBase64}")"></iframe>
    </div>
}

@if (ShowNotification)
{
    <div class="notification" style="position: fixed; bottom: 20px; right: 20px; width: 300px; padding: 10px; color: white; background-color: @BackgroundColor;">
        <span>@Message</span>
        <button class="btn-close" style="float: right; color: white;" @onclick="() => ShowNotification = false"></button>
    </div>
}
@code {
    [Parameter]
    public bool ShowNotification { get; set; }

    [Parameter]
    public string Message { get; set; } = string.Empty;

    [Parameter]
    public string BackgroundColor { get; set; } = "#007bff";

    public void ShowSuccess(string message)
    {
        Message = message;
        BackgroundColor = "#28a745"; // Green for success
        ShowNotification = true;
    }

    public void ShowError(string message)
    {
        Message = message;
        BackgroundColor = "#dc3545"; // Red for error
        ShowNotification = true;
    }
    private int ticketId;
    private int showEventInfo;
    private ByteArrayContent bgFileStreamContent;
    private TicketHandling ticketHandling = new();
    private List<CustomTextElement> customTexts = new List<CustomTextElement>();
    private IEnumerable<PropertyInfo> ticketHandlingIncludeProperties;
    private ByteArrayContent bgFileContent;
    private string pdfBase64;
    private MultipartFormDataContent content = new MultipartFormDataContent();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            byte[] buffer = new byte[file.Size];
            await stream.ReadAsync(buffer, 0, buffer.Length);
            var fileContent = new ByteArrayContent(buffer);
            fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
                {
                    Name = "bgFile",
                    FileName = file.Name
                };
            content.Add(fileContent, "bgFile", file.Name);
        }
    }

    protected override void OnInitialized()
    {
        ticketHandlingIncludeProperties = typeof(TicketHandling).GetProperties()
            .Where(p => p.PropertyType == typeof(bool) && p.Name.StartsWith("Include"));
    }

    private IEnumerable<PropertyInfo> GetPositionPropertiesForInclude(string includePropertyName)
    {
        var baseName = includePropertyName.Replace("Include", "");
        return typeof(TicketHandling).GetProperties()
            .Where(p => p.Name.Contains(baseName) && (p.Name.EndsWith("PositionX") || p.Name.EndsWith("PositionY")));
    }

    private void UpdatePositionProperty(ChangeEventArgs eventArgs, string propertyName)
    {
        if (float.TryParse(eventArgs.Value.ToString(), out var value))
        {
            var propertyInfo = typeof(TicketHandling).GetProperty(propertyName);
            propertyInfo?.SetValue(ticketHandling, value);
        }
    }

    private string GetDisplayName(string propertyName)
    {
        return Regex.Replace(propertyName, "(\\B[A-Z])", " $1").Replace("Include ", "");
    }
    
    private void AddCustomText() => customTexts.Add(new CustomTextElement(null, null, null, null, null));
    private void RemoveCustomText(CustomTextElement customText) => customTexts.Remove(customText);

    private void HandleCheckboxChange(ChangeEventArgs e, PropertyInfo propertyInfo)
    {
        if (bool.TryParse(e.Value?.ToString(), out var result))
        {
            propertyInfo.SetValue(ticketHandling, result);
            StateHasChanged();
        }
    }

    private async Task CreateTemplate()
    {
        var content = new MultipartFormDataContent();
        if (bgFileContent != null)
        {
            content.Add(bgFileContent, "bgFile");
        }

        content.Add(new StringContent(ticketId.ToString()), "ticketId");
        content.Add(new StringContent(showEventInfo.ToString()), "showEventInfo");

        var response = await httpClient.PostAsync($"api/PdfTemplate/CreateTemplate", content);
        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("$('.toast').toast('show')");
        }
        else
        {
            throw new HttpRequestException($"Failed with status code: {response.StatusCode}");
        }
    }

    private async Task CreatePdf()
    {
        var content = new MultipartFormDataContent();
        if (bgFileContent != null)
        {
            content.Add(bgFileContent, "bgFile");
        }

        content.Add(new StringContent(ticketId.ToString()), "ticketId");
        content.Add(new StringContent(showEventInfo.ToString()), "showEventInfo");

        var response = await httpClient.PostAsync($"api/PdfTemplate/CreatePdf", content);
        if (response.IsSuccessStatusCode)
        {
            var pdfData = await response.Content.ReadAsByteArrayAsync();
            pdfBase64 = Convert.ToBase64String(pdfData);
        }
        else
        {
            throw new HttpRequestException($"Failed with status code: {response.StatusCode}");
        }
    }

    private async Task DeleteTemplateAsync(string templateId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/PdfTemplate/DeleteTicketTemplate/{templateId}");
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("bootstrap.Toast.getOrCreateInstance(document.getElementById('successToast')).show");
            }
            else
            {
                throw new HttpRequestException($"Failed with status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting template: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("bootstrap.Toast.getOrCreateInstance(document.getElementById('errorToast')).show");
        }
    }


    private async Task GetPredefinedTemplateAsync(int showEventInfo, int ticketId)
    {
        try
        {
            var response = await httpClient.PostAsync($"api/PdfTemplate/GetPredefinedTemplate?showEventInfo={showEventInfo}&ticketId={ticketId}", null);
            if (response.IsSuccessStatusCode)
            {
                var pdfBytes = await response.Content.ReadAsByteArrayAsync();
                pdfBase64 = Convert.ToBase64String(pdfBytes);
                await JSRuntime.InvokeVoidAsync("bootstrap.Toast.getOrCreateInstance(document.getElementById('successToast')).show");
            }
            else
            {
                throw new HttpRequestException($"Failed with status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching predefined template: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("bootstrap.Toast.getOrCreateInstance(document.getElementById('errorToast')).show");
        }
    }

}