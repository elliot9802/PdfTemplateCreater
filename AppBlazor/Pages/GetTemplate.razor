@page "/existing-templates"
@using DbModels
@using Models
@using AppBlazor.Components
@inject HttpClient HttpClient
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@using System.Net.Http.Headers
@inject IJSRuntime JSRuntime

<h3>Existing Templates</h3>

@if (templates == null)
{
    <p><em>Loading templates...</em></p>
}
else
{
    <!-- File Upload Section -->
    <UserFileInputComponent OnFileUploaded="@HandleFileUploaded" />

    <div class="my-2">
        <select class="form-control" @onchange="OnTemplateSelected">
            <option value="">Select a Template</option>
            @foreach (var template in templates.OrderBy(t => t.ShowEventInfo))
            {
                <!-- Pass ShowEventInfo as the value -->
                <option value="@template.ShowEventInfo">@($"Template {template.ShowEventInfo} - {(template.ShowEventInfo <= 3 ? "Predefined" : "User Added")}: {template.TicketTemplateId}")</option>
            }
        </select>
    </div>

    <button class="btn btn-primary" @onclick="PreviewTemplate" disabled="@(!selectedShowEventInfo.HasValue)">Preview</button>

    @if (!isPredefined && selectedTemplateId.HasValue)
    {
        <button class="btn btn-secondary mx-2" @onclick="EditTemplate">Edit Selected Template</button>
        <button class="btn btn-danger" @onclick="DeleteTemplate">Delete Selected Template</button>
    }

    <!-- PDF Preview Section -->
    <PdfPreviewComponent PdfBase64="@pdfBase64" />

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-2" role="alert">
            @ErrorMessage
        </div>
    }
    <div id="temporaryMessage" class="alert alert-success mt-2" style="display: none;"></div>
}
<script>
    function showTemporaryMessage(message, duration) {
        var messageElement = document.getElementById('temporaryMessage');
        messageElement.innerText = message;
        messageElement.style.display = 'block';

        setTimeout(function () {
            messageElement.style.display = 'none';
        }, duration);
    }
</script>

@code {
    private List<TicketTemplateDto>? templates;
    private ByteArrayContent? bgFileContent;
    public string? ErrorMessage { get; set; }
    private bool isPredefined = true;
    private Guid? selectedTemplateId;
    private int? selectedShowEventInfo;
    private string? pdfBase64;

    private async Task ShowTemporaryMessage(string message, int duration)
    {
        await JSRuntime.InvokeVoidAsync("showTemporaryMessage", message, duration);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplatesAsync();
    }

    private void HandleFileUploaded(ByteArrayContent fileContent)
    {
        bgFileContent = fileContent;
        ErrorMessage = null;
    }

    private async Task LoadTemplatesAsync()
    {
        var response = await HttpClient.GetAsync("https://localhost:7104/api/PdfTemplate/GetTicketTemplate");
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            templates = JsonConvert.DeserializeObject<List<TicketTemplateDto>>(jsonString);
        }
        else
        {
            ErrorMessage = "Failed to load templates.";
        }
    }

    private void OnTemplateSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var showEventInfo))
        {
            var template = templates?.FirstOrDefault(t => t.ShowEventInfo == showEventInfo);
            selectedShowEventInfo = showEventInfo;
            selectedTemplateId = template?.TicketTemplateId;
            isPredefined = showEventInfo <= 3;
            pdfBase64 = null;
        }
        else
        {
            selectedShowEventInfo = null;
            selectedTemplateId = null;
        }
    }

    private async Task PreviewTemplate()
    {
        ErrorMessage = string.Empty;
        if (selectedShowEventInfo.HasValue && selectedShowEventInfo > 0)
        {
            if (bgFileContent == null)
            {
                ErrorMessage = "Please select a background file before proceeding";
                return;
            }

            var fileName = bgFileContent.Headers?.ContentDisposition?.FileName?.Trim('"');
            if (string.IsNullOrEmpty(fileName))
            {
                ErrorMessage = "The file name was not provided.";
                return;
            }

            var ticketId = "14825";
            var requestUri = $"https://localhost:7104/api/PdfTemplate/GetPredefinedTemplate/GetPredefinedTemplate?showEventInfo={selectedShowEventInfo}&ticketId={ticketId}";
            var content = new MultipartFormDataContent();

            content.Add(bgFileContent, "bgFile", fileName);

            try
            {
                var response = await HttpClient.PostAsync(requestUri, content);
                if (response.IsSuccessStatusCode)
                {
                    var pdfData = await response.Content.ReadAsByteArrayAsync();
                    pdfBase64 = Convert.ToBase64String(pdfData);
                }
                else
                {
                    ErrorMessage = "Failed to preview the template.";
                    Console.WriteLine($"Failed to preview PDF. Status code: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = "An error occurred while attempting to preview the template.";
                Console.WriteLine($"Exception while calling PreviewTemplate API: {ex.Message}");
            }
        }
    }

    private async Task DeleteTemplate()
    {
        if (!isPredefined && selectedTemplateId.HasValue)
        {
            var response = await HttpClient.DeleteAsync($"https://localhost:7104/api/PdfTemplate/DeleteTicketTemplate/{selectedTemplateId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadTemplatesAsync();
                pdfBase64 = null;
                await ShowTemporaryMessage("Template successfully deleted.", 5000);
            }
            else
            {
                ErrorMessage = "Failed to delete the template. Please try again.";
            }
        }
    }

    private void EditTemplate()
    {
        if (selectedShowEventInfo.HasValue)
        {
            NavigationManager.NavigateTo($"/edit-template/{selectedTemplateId}");
        }
    }
}
